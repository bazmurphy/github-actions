name: 07 Artifacts & Caching
on:
  push:
    branches:
      - main

# set the working directory for all run steps in the workflow (does not affect "uses" Actions)
defaults:
  run:
    working-directory: 04-project

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Get Code
        uses: actions/checkout@v3
      # we start the Cache here before the `Install Dependencies` Step
      - name: Cache Dependencies
        uses: actions/cache@v3
        with:
          # `path` is the files/folders that should be Cached
          # if this folder exists it will be used, otherwise the Cache will be re-downloaded
          # also the Action executes AGAIN when the Job finishes
          # and will look at this folder and update the Cache if it didn't have it before or there are any changes
          path: ~/.npm
          # `key` is used for retrieving the Cache in the future and recreating those files/folder on the Runner
          # the key also determines if the Cache should be discarded because something changed
          # so we must give the key a dynamic name (using a GitHub Action function)
          # now whenever the package-lock.json changes the hash produced will change and so the key name will change
          # and when the key changes it will know to discard the Cache and recreate it
          key: dependencies-node-modules-${{ hashFiles('package-lock.json') }}
      - name: Install Dependencies
        # now the npm ci will automatically use the ./~npm folder
        # if it exists it wil be used, if it doesn't exist the Dependencies will be re-downloaded
        run: npm ci
      - name: Lint Code
        run: npm run lint
      - name: Test Code
        run: npm run test
  build:
    needs: test
    runs-on: ubuntu-latest
    # We define the Outputs
    outputs:
      # We give it an identifier and use the GitHub Actions Context
      # Using `steps` `id of the step` `outputs` `key name`
      javascript-file: ${{ steps.publish.outputs.javascript-file }}
    steps:
      - name: Get Code
        uses: actions/checkout@v3
        # we run the Cache Action again wherever we `Install Dependencies` in other Jobs
      - name: Cache Dependencies
        # the Cache is one central cache available across Jobs and Workflow Execution cycles
        # so if we put our Dependencies into the Cache already with the `test` Job
        # it is now also available here in the `build` Job
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: dependencies-node-modules-${{ hashFiles('package-lock.json') }}
      - name: Install dependencies
        run: npm ci
      - name: Build Code
        run: npm run build
        # We create a step to create an Output value
      - name: Publish JavaScript Filename
        # we can access data from this step via this id
        id: publish
        # a regular a linux command that:
        # finds the javascript file in the assets folder
        # you use an identifier key of your choice and store the value in it eg. javascript-file=filename.js
        # it then writes that key=value pair into a special file $GITHUB_OUTPUT created by GitHub in the Environment your Job is running
        run: find dist/assets/*.js -type f -execdir echo 'javascript-file={}' >> $GITHUB_OUTPUT ';'
        # This allows us to Upload Artifacts
      - name: Upload Artifacts
        uses: actions/upload-artifact@v3
        with:
          # we give the Artifact a name, so we can retrieve it later
          name: dist-artifact
          # this defines which files you want to store
          path: 04-project/dist
  deploy:
    # this Job needs to run from the default directory because the 04-project folder doesn't exist
    defaults:
      run:
        working-directory: ${{ github.workspace }}
    needs: build # we need this because otherwise the Artifact will not have been uploaded and so could not be downloaded
    runs-on: ubuntu-latest
    steps:
      - name: Download Artifacts
        uses: actions/download-artifact@v3
        with:
          # we need to provide the Artifact identifier
          name: dist-artifact
      - name: Output Current Folder and Contents
        # /home/runner/work/github-actions/github-actions
        # assets, index.html, vite.svg
        run: |
          pwd
          ls
      # we can access the Output from the `build` Job using GitHub Context
      # we use the `needs` object to gain access to the `build` Job and get its Outputs
      # `needs.(other job name).outputs.(output-identifier)`
      - name: Output JavaScript Filename
        run: echo "${{ needs.build.outputs.javascript-file }}"
      - name: Deploy Code
        run: echo "Deploying..."
